pragma solidity ^0.4.24;
import "./DataBase.sol";
import "./ConcreteProduct.sol";

contract Batch{
    address DATABASE_CONTRACT;
    address owner; //власник - це контракт який його створив
    
    address[] concreteProducts;
    address product;
    
    address parentBatch;
    address[] childBatches;
    
    uint256 numberOfParty;
    string  details;
    string dateCreated;
    int size; // sizeAvailable products
    int capacity; //maxSize products

    constructor(address _DATABASE_CONTRACT, address _owner, address _product, address _parentBatch,  uint256 _numberOfParty, string _details,  string _dateCreated, int _size, uint256[] _ids, uint256[] _qrs) public
    {
        DATABASE_CONTRACT = _DATABASE_CONTRACT;
        owner = _owner;
        parentBatch = _parentBatch;
        product = _product;
        
        numberOfParty = _numberOfParty;
        details = _details;
        dateCreated = _dateCreated;
        size = capacity = _size;
        
        // + задати ціну кожному продукту і всі решта характеристики
        for(var i=0;i<size;i++)
            concreteProducts.push(new ConcreteProduct(DATABASE_CONTRACT, this, product, _ids[i], _qrs[i]));
    }
    function getDetails() view public returns(address owner, address parentBatch, address[] childBatches, uint256 numberOfParty, string details, address[] concreteProducts)
    {
        return (owner,parentBatch,childBatches,numberOfParty,details,concreteProducts);
    }
    function getParentBatch() view public returns (address parentBatchAddress)
    {
        return parentBatch;
    }
    function setSize(int _size) public
    {
        size = size-_size;
    }
    function getSize() view public returns(int size)
    {
        return size;
    }
    function getProduct() view public returns(address product)
    {
        return product;
    }
    function getDet() public returns(string details)
    {
        return details;
    }
    function getChildBatches()view public returns(address[] childBatches)
    {
        return childBatches;
    }
}